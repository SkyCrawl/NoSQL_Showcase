import java.io.IOException;
import java.util.*;

import org.apache.hadoop.fs.Path;
import org.apache.hadoop.io.*;
import org.apache.hadoop.mapred.*;

public class PalindromCount
{
	public static class Map extends MapReduceBase implements Mapper<LongWritable, Text, Text, IntWritable>
	{ 
		private final static IntWritable one = new IntWritable(1); 
		private Text word = new Text();

		public void map(LongWritable key, Text value, OutputCollector<Text, IntWritable> output, Reporter reporter) throws IOException
		{ 
			String line = value.toString();
			String[] words = line.split("[\\s,\\.?!]");
			for(int i = 0; i < words.length; i++)
			{
				if((words[i].length() > 0) && wordIsAPalindrom(words[i]))
				{
					word.set(words[i]);
					output.collect(word, one);
				}
			}
		}
	}
   
	 public static boolean wordIsAPalindrom(String word)
	 {
		 if(word.length() > 1)
		 {
			 int bound = word.length() / 2;
			 if((word.length() % 2) == 0)
			 {
				 bound--;
			 }
			 for(int i = 0; i <= bound; i++)
			 {
				 int left = i;
				 int right = word.length() - 1 - i;
				 if((left != right) && (word.charAt(i) != word.charAt(word.length() - 1 - i)))
				 {
					 return false;
				 }
			 }
			 return true;
		 }
		 else
		 {
			 return false;
		 }
	 }

	 public static class Reduce extends MapReduceBase implements Reducer<Text, IntWritable, Text, IntWritable>
	 {
		 public void reduce(Text key, Iterator<IntWritable> values, OutputCollector<Text, IntWritable> output, Reporter reporter) throws IOException
		 {
			 // each palindrom counts only once
			 output.collect(key, new IntWritable(1));
		 }
	 }

	 public static void main(String[] args) throws Exception
	 {
		 JobConf conf = new JobConf(PalindromCount.class);
		 conf.setJobName("palindromCount");
	
		 conf.setOutputKeyClass(Text.class);
		 conf.setOutputValueClass(IntWritable.class);
	
		 conf.setMapperClass(Map.class);
		 conf.setCombinerClass(Reduce.class);
		 conf.setReducerClass(Reduce.class);
	
		 conf.setInputFormat(TextInputFormat.class);
		 conf.setOutputFormat(TextOutputFormat.class);
	
		 FileInputFormat.setInputPaths(conf, new Path(args[0]));
		 FileOutputFormat.setOutputPath(conf, new Path(args[1]));
	
		 JobClient.runJob(conf);
		 
		 /*
		 String testLine = "You are not a radar, madam?";
		 String[] words = testLine.split("[\\s,\\.?!]");
		 for(int i = 0; i < words.length; i++)
		 {
			 if(words[i].length() > 0)
			 {
				 System.out.println("Captured and processed word: " + words[i]);
			 }
			 if(wordIsAPalindrom(words[i]))
			 {
				 System.out.println("Captured palindrom: " + words[i]);
			 }
		 }
		 */
   }
}